# -*- coding: utf-8 -*-
"""Atlas Cod. Success

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aLmu9j2UnZBYNBcRktl4gAneEIEx-kzl

# Carga de librerías
"""

# Carga de librerías
# Instalar si es necesario (SE DEMORA 7 MINUTOS en ejecutar)
install.packages(c("readr", "dplyr", "randomForest", "ggplot2", "caret"))

# Cargar librerías
library(readr)
library(dplyr)
library(randomForest)
library(ggplot2)
library(caret)

"""# Main (Código principal)"""

# Main (Código principal)
# Leer CSV
df <- read_csv("AtlasRetail_PowerBI_Final_Limpio.csv", locale = locale(decimal_mark = ","))

# Renombrar variables clave
names(df)[names(df) == "Margen_(%)"] <- "Margen_pct"
names(df)[names(df) == "Rentabilidad_(%)"] <- "Rentabilidad_pct"

# Main (Código principal)
df <- read_csv("AtlasRetail_PowerBI_Final_Limpio.csv", locale = locale(decimal_mark = ","))

names(df)[names(df) == "Rentabilidad_(%)"] <- "Rentabilidad_pct"
names(df)[names(df) == "Margen_(%)"] <- "Margen_pct"

df <- df %>%
  mutate(
    Rentabilidad_pct = as.numeric(gsub(",", ".", Rentabilidad_pct)),
    Margen_pct = as.numeric(gsub(",", ".", Margen_pct)),
    Costo_envio = as.numeric(gsub(",", ".", Costo_de_envio)),
    Descuento = as.numeric(gsub(",", ".", Descuento)),
    Precio_unitario = as.numeric(gsub(",", ".", Precio_Unitario_de_Venta)),
    Costo_total = as.numeric(gsub(",", ".", Costo_Total)),
    Cantidad = as.numeric(Cantidad),
    Región = as.factor(Region),
    Categoría = as.factor(Categoria),
    Sub_Categoría = as.factor(Sub_Categoria),
    Prioridad = as.factor(Prioridad_de_orden)
  ) %>%
  select(Rentabilidad_pct, Margen_pct, Costo_envio, Descuento, Precio_unitario,
         Costo_total, Cantidad, Región, Categoría, Sub_Categoría, Prioridad) %>%
  na.omit()

# 2. Crear variables derivadas
df <- df %>%
  mutate(
    Margen_vs_Precio_unitario = ifelse(Precio_unitario == 0, 0, Margen_pct / Precio_unitario),
    Ratio_descuento_costo = ifelse(Costo_envio == 0, 0, Descuento / Costo_envio)
  )

# 3. Descuento promedio por categoría
prom_descuento <- df %>%
  group_by(Categoría) %>%
  summarise(Desc_por_categoria = mean(Descuento, na.rm = TRUE))

df <- left_join(df, prom_descuento, by = "Categoría")

# 4. Filtrar outliers extremos de Rentabilidad
df <- df %>%
  filter(Rentabilidad_pct > -100, Rentabilidad_pct < 150)

"""# Fase de entrenamiento del modelo"""

# Fase de entrenamiento del modelo
# 5. División entrenamiento / prueba
set.seed(42)
trainIndex <- createDataPartition(df$Rentabilidad_pct, p = 0.8, list = FALSE)
trainData <- df[trainIndex, ]
testData <- df[-trainIndex, ]

# Fase de entrenamiento del modelo
# 6. Entrenar modelo con nuevas variables (se demoro 27 minutos)
modelo_rf <- randomForest(
  Rentabilidad_pct ~ Costo_envio + Descuento + Precio_unitario + Costo_total + Cantidad +
    Región + Categoría + Sub_Categoría + Prioridad +
    Margen_vs_Precio_unitario + Ratio_descuento_costo + Desc_por_categoria,
  data = trainData,
  ntree = 300,
  mtry = 4,
  importance = TRUE
)

"""# Evaluación del modelo"""

# Evaluación del modelo
# 7. Evaluación del modelo
pred <- predict(modelo_rf, newdata = testData)
rsq <- cor(pred, testData$Rentabilidad_pct)^2
rmse <- sqrt(mean((pred - testData$Rentabilidad_pct)^2))

cat("🎯 R² FINAL:", rsq, "\n📉 RMSE FINAL:", rmse, "\n")

# Evaluación del modelo
varImpPlot(modelo_rf, main = "Importancia de Variables - Modelo Optimizado")

# Evaluación del modelo
# Calcular el RMSE relativo
rango_rentabilidad <- max(df$Rentabilidad_pct) - min(df$Rentabilidad_pct)
rmse_relativo <- rmse / rango_rentabilidad

cat("📏 RMSE Relativo:", round(rmse_relativo, 4), "\n")

# Evaluación del modelo
# Predicción con test set (validación externa)
pred <- predict(modelo_rf, newdata = testData)

# Métricas con test set
rsq_test <- cor(pred, testData$Rentabilidad_pct)^2
rmse_test <- sqrt(mean((pred - testData$Rentabilidad_pct)^2))

cat("🧪 Test Set - R²:", round(rsq_test, 4), "\n")
cat("🧪 Test Set - RMSE:", round(rmse_test, 4), "\n")

# Evaluación del modelo
# OOB: Out-of-Bag error
rmse_oob <- sqrt(modelo_rf$mse[modelo_rf$ntree])  # RMSE = sqrt del último MSE
rsq_oob <- modelo_rf$rsq[modelo_rf$ntree]         # R² OOB del último árbol

cat("🌲 OOB - RMSE:", round(rmse_oob, 4), "\n")
cat("🌲 OOB - R²:", round(rsq_oob, 4), "\n")

| Métrica         | ¿Qué mide?                                    | ¿Qué esperas ver?             |
| --------------- | --------------------------------------------- | ----------------------------- |
| RMSE Relativo   | Qué tan grande es el error comparado al rango | Ideal < 0.10                  |
| RMSE (Test Set) | Precisión real con datos no vistos            | Mientras más bajo, mejor      |
| R² (Test Set)   | Porcentaje de variabilidad explicada          | > 0.90                        |
| RMSE / R² OOB   | Validación cruzada interna del modelo         | Debe ser parecido al test set |

"""# Predicción de Rentabilidad"""

# Predicción de Rentabilidad
# Categorías validad a ingresar, elija una por concepto:
levels(df$Región)
levels(df$Categoría)
levels(df$Sub_Categoría)
levels(df$Prioridad)

# Predicción de Rentabilidad
# Categorías y sus Sub_Categorías válidas:

# Furniture: Chairs, Tables, Bookcases, Furnishings

# Office Supplies: Binders, Paper, Labels, Storage, Supplies, Art

# Technology: Phones, Accessories, Machines, Copiers

# Predicción de Rentabilidad
# Valores estimados de referencia:
df %>%
  group_by(Categoría) %>%
  summarise(Desc_por_categoria = mean(Descuento, na.rm = TRUE))

# Predicción de Rentabilidad
# Para calcular: margen_vs_precio_unitario y ratio_descuento_costo, ingrese los datos deseados
descuento <- 0.18
costo_envio <- 2000
precio_unitario <- 150
costo_total <- 40000
cantidad <- 8


# Cálculo automático de variables derivadas
margen_vs_precio_unitario <- (costo_total - costo_envio) / (precio_unitario * cantidad)
ratio_descuento_costo <- descuento / costo_envio

cat("🧮 Margen vs Precio Unitario:", round(margen_vs_precio_unitario, 4), "\n")
cat("📉 Ratio Descuento / Costo:", format(round(ratio_descuento_costo, 6), scientific = FALSE), "\n")

# Predicción de Rentabilidad
# Ejemplo: nuevo dato (puedes cambiar los valores)
nuevo_dato <- data.frame(
  Costo_envio = 2000,
  Descuento = 0.18,
  Precio_unitario = 150,
  Costo_total = 40000,
  Cantidad = 8,
  Región = factor("Canada", levels = levels(df$Región)),
  Categoría = factor("Technology", levels = levels(df$Categoría)),
  Sub_Categoría = factor("Machines", levels = levels(df$Sub_Categoría)),
  Prioridad = factor("High", levels = levels(df$Prioridad)),
  Margen_vs_Precio_unitario = 31.6667,       # Calculado o estimado
  Ratio_descuento_costo = 0.00009 ,         # Descuento / Costo_envio
  Desc_por_categoria = 0.1091221             # Promedio según categoría
)

# Predicción
pred_rentabilidad <- predict(modelo_rf, newdata = nuevo_dato)

# Mostrar resultado
cat("🔮 Predicción de Rentabilidad (%) =", round(pred_rentabilidad, 2), "%\n")

"""# Codigos necesarios para crear la interfaz en Visual Studio Code con Shiny"""

# Codigos necesarios para crear la interfaz en Visual Studio Code con Shiny
library(tidyverse)

# 1. Leer el CSV original
df <- read_csv("AtlasRetail_PowerBI_Final_Limpio.csv", locale = locale(decimal_mark = ","))

# Codigos necesarios para crear la interfaz en Visual Studio Code con Shiny
# 2. Renombrar y convertir variables
df <- df %>%
  rename(
    Rentabilidad_pct = `Rentabilidad_(%)`,
    Margen_pct = `Margen_(%)`
  ) %>%
  mutate(
    Rentabilidad_pct = as.numeric(gsub(",", ".", Rentabilidad_pct)),
    Margen_pct = as.numeric(gsub(",", ".", Margen_pct)),
    Costo_envio = as.numeric(gsub(",", ".", Costo_de_envio)),
    Descuento = as.numeric(gsub(",", ".", Descuento)),
    Precio_unitario = as.numeric(gsub(",", ".", Precio_Unitario_de_Venta)),
    Costo_total = as.numeric(gsub(",", ".", Costo_Total)),
    Cantidad = as.numeric(Cantidad),
    Región = as.factor(Region),
    Categoría = as.factor(Categoria),
    Sub_Categoría = as.factor(Sub_Categoria),
    Prioridad = as.factor(Prioridad_de_orden)
  ) %>%
  na.omit()

# 3. Crear nuevas variables derivadas
df <- df %>%
  mutate(
    Margen_vs_Precio_unitario = ifelse(Precio_unitario == 0, 0, Margen_pct / Precio_unitario),
    Ratio_descuento_costo = ifelse(Costo_envio == 0, 0, Descuento / Costo_envio)
  )

# 4. Agregar descuento promedio por categoría
prom_descuento <- df %>%
  group_by(Categoría) %>%
  summarise(Desc_por_categoria = mean(Descuento, na.rm = TRUE))

df <- left_join(df, prom_descuento, by = "Categoría")

# 5. Filtrar outliers extremos
df <- df %>%
  filter(Rentabilidad_pct > -100, Rentabilidad_pct < 150)

# 6. Seleccionar solo las columnas que usa el modelo
df_final <- df %>%
  select(Rentabilidad_pct, Costo_envio, Descuento, Precio_unitario, Costo_total, Cantidad,
         Región, Categoría, Sub_Categoría, Prioridad,
         Margen_vs_Precio_unitario, Ratio_descuento_costo, Desc_por_categoria)

# 7. Guardar el dataset limpio
write_csv(df_final, "dataset_final_para_visual_studio_code_limpio.csv")

# Codigos necesarios para crear la interfaz en Visual Studio Code con Shiny
names(df_final)

# Codigos necesarios para crear la interfaz en Visual Studio Code con Shiny
# Guardar el modelo como archivo RDS
saveRDS(modelo_rf, file = "modelo_rf.rds")