# -*- coding: utf-8 -*-
"""ATLAS C/ LM .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ajU_IZhUUg3y9WpAerGrw7lyuDdrrRlA

# 1. COORELACI√ìN VARIABLES NUM√âRICAS Y CATEG√ìRICAS

# 1.1 Modelo ANOVA

(permite identificar qu√© variables categ√≥ricas influyen significativamente en Margen y Rentabilidad y cuantificar esas diferencias entre grupos)
"""

# Instalar paquetes si no los tienes
install.packages(c("readr", "dplyr", "car"))

# Cargar librer√≠as
library(readr)
library(dplyr)
library(car)

# Leer CSV con coma como decimal
df <- read_csv("AtlasRetail_PowerBI_Final_Limpio.csv", locale = locale(decimal_mark = ","))

# Transformar variables categ√≥ricas a factor
df <- df %>%
  mutate(
    Fecha_de_orden = as.Date(Fecha_de_orden),
    Modo_de_envio = as.factor(Modo_de_envio),
    Nombre_cliente = as.factor(Nombre_cliente),
    Segmento = as.factor(Segmento),
    Pais = as.factor(Pais),
    Mercado = as.factor(Mercado),
    Region = as.factor(Region),
    Categoria = as.factor(Categoria),
    Sub_Categoria = as.factor(Sub_Categoria),
    Prioridad_de_orden = as.factor(Prioridad_de_orden),
    Mes = as.factor(format(Fecha_de_orden, '%Y-%m')),
    Margen = as.numeric(gsub(",", ".", `Margen_(%)`)),
    Rentabilidad = as.numeric(gsub(",", ".", `Rentabilidad_(%)`))
  ) %>%
  filter(!is.na(Margen), !is.na(Rentabilidad))

# Variables a probar
categoricas <- c("Modo_de_envio", "Nombre_cliente", "Segmento", "Pais", "Mercado",
                 "Region", "Categoria", "Sub_Categoria", "Prioridad_de_orden", "Mes")

# Tabla de resultados
resultados <- data.frame(Variable=character(), P_Margen=double(), P_Rentabilidad=double(), stringsAsFactors=FALSE)

for (var in categoricas) {
  formula_margen <- as.formula(paste("Margen ~", var))
  formula_rent <- as.formula(paste("Rentabilidad ~", var))

  p_margen <- tryCatch(summary(aov(formula_margen, data=df))[[1]][["Pr(>F)"]][1], error=function(e) NA)
  p_rent <- tryCatch(summary(aov(formula_rent, data=df))[[1]][["Pr(>F)"]][1], error=function(e) NA)

  resultados <- rbind(resultados, data.frame(Variable=var, P_Margen=p_margen, P_Rentabilidad=p_rent))
}

# Mostrar resultados con interpretaci√≥n
resultados$Interpretacion_Margen <- ifelse(resultados$P_Margen < 0.05, "S√≠ influye", "No influye")
resultados$Interpretacion_Rentabilidad <- ifelse(resultados$P_Rentabilidad < 0.05, "S√≠ influye", "No influye")

print(resultados)

"""# 1.2 √çndice de correlaci√≥n de Pearson

**Un valor > a 0:** correlaci√≥n positiva (Cuanto m√°s cercano a 1, m√°s fuerte es esta relaci√≥n directa)
"cuando una variable aumenta, la otra tambi√©n tiende a aumentar"

**Un valor < a 0:** correlaci√≥n negativa (Cuanto m√°s cercano a -1, m√°s fuerte es esta relaci√≥n inversa)
"cuando una variable aumenta, la otra tiende a disminuir"

**Un valor cercano o = a 0:** no hay relaci√≥n lineal entre las dos variables; es decir, los cambios en una variable no se asocian de manera consistente con cambios en la otra
"""

# Instalar si no los tienes
install.packages(c("readr", "dplyr", "corrplot"))

# Cargar librer√≠as
library(readr)
library(dplyr)
library(corrplot)

# Leer el CSV
df <- read_csv("AtlasRetail_PowerBI_Final_Limpio.csv", locale = locale(decimal_mark = ","))

# Limpiar y seleccionar columnas num√©ricas
df_numeric <- df %>%
  mutate(
    Monto_total_ventas = as.numeric(gsub(",", ".", Monto_total_ventas)),
    Cantidad = as.numeric(Cantidad),
    Descuento = as.numeric(gsub(",", ".", Descuento)),
    Ganancia = as.numeric(gsub(",", ".", Ganancia)),
    Costo_de_envio = as.numeric(gsub(",", ".", Costo_de_envio)),
    Costo_Total = as.numeric(gsub(",", ".", Costo_Total)),
    Precio_Unitario_de_Venta = as.numeric(gsub(",", ".", Precio_Unitario_de_Venta)),
    `Rentabilidad_(%)` = as.numeric(gsub(",", ".", `Rentabilidad_(%)`)),
    `Margen_(%)` = as.numeric(gsub(",", ".", `Margen_(%)`)),
    `Rentabilidad_Neta_($)` = as.numeric(gsub(",", ".", `Rentabilidad_Neta_($)`))
  ) %>%
  select(
    Monto_total_ventas, Cantidad, Descuento, Ganancia, Costo_de_envio,
    Costo_Total, Precio_Unitario_de_Venta, `Rentabilidad_(%)`, `Margen_(%)`, `Rentabilidad_Neta_($)`
  ) %>%
  na.omit()

# Calcular matriz de correlaci√≥n
cor_matrix <- cor(df_numeric, use = "complete.obs")

# Graficar
corrplot(cor_matrix, method = "color", type = "upper", tl.cex = 0.8,
         col = colorRampPalette(c("red", "white", "blue"))(200),
         title = "Matriz de Correlaci√≥n - Variables Num√©ricas", mar = c(0,0,2,0))

# Mostrar los nombres reales de las columnas
print(colnames(df_model))

"""# 2. MODELO PREDICTIVO"""

# Instalar e importar librer√≠as necesarias
install.packages("randomForest")
install.packages("readr")
install.packages("dplyr")
install.packages("caret")

library(randomForest)
library(readr)
library(dplyr)
library(caret)

"""# 2.1 Codigo Modelo Random Forest"""

# Leer CSV y renombrar columnas clave
df <- read_csv("AtlasRetail_PowerBI_Final_Limpio.csv", locale = locale(decimal_mark = ","))
names(df)[names(df) == "Margen_(%)"] <- "Margen_pct"
names(df)[names(df) == "Rentabilidad_(%)"] <- "Rentabilidad_pct"

# Procesar datos
df <- df %>%
  mutate(
    Margen_pct = as.numeric(gsub(",", ".", as.character(Margen_pct))),
    Rentabilidad_pct = as.numeric(gsub(",", ".", as.character(Rentabilidad_pct))),
    Costo_envio = as.numeric(gsub(",", ".", Costo_de_envio)),
    Descuento = as.numeric(gsub(",", ".", Descuento)),
    Precio_unitario = as.numeric(gsub(",", ".", Precio_Unitario_de_Venta)),
    Cantidad = as.numeric(Cantidad),
    Regi√≥n = as.factor(Region),
    Categor√≠a = as.factor(Categoria),
    Sub_Categoria = as.factor(Sub_Categoria),
    Prioridad = as.factor(Prioridad_de_orden)
  ) %>%
  select(Margen_pct, Rentabilidad_pct, Costo_envio, Descuento, Cantidad,
         Precio_unitario, Regi√≥n, Categor√≠a, Sub_Categoria, Prioridad) %>%
  na.omit()

# Divisi√≥n entrenamiento/prueba
set.seed(42)
trainIndex <- createDataPartition(df$Margen_pct, p = 0.8, list = FALSE)
trainData <- df[trainIndex, ]
testData <- df[-trainIndex, ]

# Entrenar modelos (sin usar la otra variable objetivo como predictor)
modelo_margen_pct <- randomForest(
  Margen_pct ~ Costo_envio + Descuento + Cantidad + Precio_unitario +
    Regi√≥n + Categor√≠a + Sub_Categoria + Prioridad,
  data = trainData, ntree = 100
)

modelo_rentabilidad <- randomForest(
  Rentabilidad_pct ~ Costo_envio + Descuento + Cantidad + Precio_unitario +
    Regi√≥n + Categor√≠a + Sub_Categoria + Prioridad,
  data = trainData, ntree = 100
)

# Guardar modelos y niveles
saveRDS(modelo_margen_pct, "modelo_margen_pct.rds")
saveRDS(modelo_rentabilidad, "modelo_rentabilidad.rds")
saveRDS(levels(trainData$Regi√≥n), "niveles_region.rds")
saveRDS(levels(trainData$Categor√≠a), "niveles_categoria.rds")
saveRDS(levels(trainData$Sub_Categoria), "niveles_sub_categoria.rds")
saveRDS(levels(trainData$Prioridad), "niveles_prioridad.rds")

cat("‚úÖ Nuevos modelos entrenados correctamente sin dependencias cruzadas.\\n")

# Leer CSV y cambiar nombres al volar
df <- read_csv("AtlasRetail_PowerBI_Final_Limpio.csv", locale = locale(decimal_mark = ","))

# Renombrar columnas directamente
names(df)[names(df) == "Margen_(%)"] <- "Margen_pct"
names(df)[names(df) == "Rentabilidad_(%)"] <- "Rentabilidad_pct"

# Verifica el cambio
colnames(df)

# Cargar modelos entrenados
modelo_margen_pct <- readRDS("modelo_margen_pct.rds")
modelo_rentabilidad <- readRDS("modelo_rentabilidad.rds")

# Cargar niveles de factores
niveles_region <- readRDS("niveles_region.rds")
niveles_categoria <- readRDS("niveles_categoria.rds")
niveles_sub_categoria <- readRDS("niveles_sub_categoria.rds")
niveles_prioridad <- readRDS("niveles_prioridad.rds")

# Crear nueva observaci√≥n con los mismos campos usados en los modelos
nueva_obs <- data.frame(
  Costo_envio = 360,
  Descuento = 0,15,
  Cantidad = 15,
  Precio_unitario = 178,
  Regi√≥n = factor("Africa", levels = niveles_region),
  Categor√≠a = factor("Technology", levels = niveles_categoria),
  Sub_Categoria = factor("Copiers", levels = niveles_sub_categoria),
  Prioridad = factor("Critical", levels = niveles_prioridad)
)

# Predecir
margen_pred <- predict(modelo_margen_pct, newdata = nueva_obs)
rentabilidad_pred <- predict(modelo_rentabilidad, newdata = nueva_obs)

# Mostrar resultados
cat("üìä Margen estimado: ", round(margen_pred, 2), "%\n")
cat("üí∞ Rentabilidad estimada: ", round(rentabilidad_pred, 2), "%\n")

# Verificar si existe esa combinaci√≥n en el dataset
df %>% filter(
  Regi√≥n == "South",
  Categor√≠a == "Technology",
  Sub_Categoria == "Copiers",
  Prioridad == "Critical"
)

"""# 2.2 Test de Validaciones"""

# ========================
# 2. Cargar y procesar datos
# ========================
df <- read_csv("AtlasRetail_PowerBI_Final_Limpio.csv", locale = locale(decimal_mark = ","))

# Renombrar columnas clave
names(df)[names(df) == "Margen_(%)"] <- "Margen_pct"
names(df)[names(df) == "Rentabilidad_(%)"] <- "Rentabilidad_pct"

# Convertir y limpiar datos
df <- df %>%
  mutate(
    Margen_pct = as.numeric(gsub(",", ".", as.character(Margen_pct))),
    Rentabilidad_pct = as.numeric(gsub(",", ".", as.character(Rentabilidad_pct))),
    Costo_envio = as.numeric(gsub(",", ".", Costo_de_envio)),
    Descuento = as.numeric(gsub(",", ".", Descuento)),
    Precio_unitario = as.numeric(gsub(",", ".", Precio_Unitario_de_Venta)),
    Cantidad = as.numeric(Cantidad),
    Regi√≥n = as.factor(Region),
    Categor√≠a = as.factor(Categoria),
    Sub_Categoria = as.factor(Sub_Categoria),
    Prioridad = as.factor(Prioridad_de_orden)
  ) %>%
  select(Margen_pct, Rentabilidad_pct, Costo_envio, Descuento, Cantidad,
         Precio_unitario, Regi√≥n, Categor√≠a, Sub_Categoria, Prioridad) %>%
  na.omit()

# ========================
# 3. Divisi√≥n entrenamiento/prueba
# ========================
set.seed(42)
trainIndex <- createDataPartition(df$Margen_pct, p = 0.8, list = FALSE)
trainData <- df[trainIndex, ]
testData <- df[-trainIndex, ]

# ========================
# 4. Entrenamiento con OOB
# ========================
modelo_margen_pct <- randomForest(
  Margen_pct ~ Costo_envio + Descuento + Cantidad + Precio_unitario +
    Regi√≥n + Categor√≠a + Sub_Categoria + Prioridad,
  data = trainData,
  ntree = 100
)

modelo_rentabilidad <- randomForest(
  Rentabilidad_pct ~ Costo_envio + Descuento + Cantidad + Precio_unitario +
    Regi√≥n + Categor√≠a + Sub_Categoria + Prioridad,
  data = trainData,
  ntree = 100
)

# ========================
# 5. Validaci√≥n OOB
# ========================
cat("üìä OOB Error (Margen_pct):\n")
print(modelo_margen_pct)

cat("\nüìä OOB Error (Rentabilidad_pct):\n")
print(modelo_rentabilidad)

# ========================
# 6. Validaci√≥n con Test Set (RMSE)
# ========================
pred_margen <- predict(modelo_margen_pct, newdata = testData)
pred_rentab <- predict(modelo_rentabilidad, newdata = testData)

cat("\nüìâ RMSE Margen_pct (Test Set): ", RMSE(pred_margen, testData$Margen_pct), "\n")
cat("üìâ RMSE Rentabilidad_pct (Test Set): ", RMSE(pred_rentab, testData$Rentabilidad_pct), "\n")

# ========================
# 9. Comparaci√≥n con modelo base (predicci√≥n promedio)
# ========================

# Predicci√≥n constante con la media del entrenamiento
baseline_margen <- rep(mean(trainData$Margen_pct), nrow(testData))
baseline_rentab <- rep(mean(trainData$Rentabilidad_pct), nrow(testData))

# RMSE del modelo base
baseline_rmse_margen <- RMSE(baseline_margen, testData$Margen_pct)
baseline_rmse_rentab <- RMSE(baseline_rentab, testData$Rentabilidad_pct)

cat("\n‚öôÔ∏è  Modelo base (predice media)\n")
cat("RMSE Margen_pct (base): ", baseline_rmse_margen, "\n")
cat("RMSE Rentabilidad_pct (base): ", baseline_rmse_rentab, "\n")

# ========================
# 10. RMSE relativo (RMSE / rango)
# ========================

# Calcular rango real
rango_margen <- max(df$Margen_pct, na.rm = TRUE) - min(df$Margen_pct, na.rm = TRUE)
rango_rentab <- max(df$Rentabilidad_pct, na.rm = TRUE) - min(df$Rentabilidad_pct, na.rm = TRUE)

# RMSE relativos
rel_rmse_margen <- RMSE(pred_margen, testData$Margen_pct) / rango_margen
rel_rmse_rentab <- RMSE(pred_rentab, testData$Rentabilidad_pct) / rango_rentab

cat("\nüìê RMSE Relativo:\n")
cat("Margen_pct: ", round(100 * rel_rmse_margen, 2), "% del rango\n")
cat("Rentabilidad_pct: ", round(100 * rel_rmse_rentab, 2), "% del rango\n")

# Predicci√≥n en datos de prueba
pred_margen <- predict(modelo_margen_pct, newdata = testData)
pred_rentabilidad <- predict(modelo_rentabilidad, newdata = testData)

# Calcular R¬≤ como el cuadrado de la correlaci√≥n real vs. predicho
r2_margen <- cor(testData$Margen_pct, pred_margen)^2
r2_rentabilidad <- cor(testData$Rentabilidad_pct, pred_rentabilidad)^2

# Mostrar resultados
cat("üìà R¬≤ del modelo de Margen (%):", round(r2_margen, 4), "\n")
cat("üìà R¬≤ del modelo de Rentabilidad (%):", round(r2_rentabilidad, 4), "\n")

# Calcular y mostrar R¬≤ para margen
pred_margen <- predict(modelo_margen_pct, newdata = testData)
r2_margen <- cor(testData$Margen_pct, pred_margen)^2
cat(paste0("üìà R¬≤ Margen (%): ", round(r2_margen, 4), "\n"))

# Calcular y mostrar R¬≤ para rentabilidad
pred_rentabilidad <- predict(modelo_rentabilidad, newdata = testData)
r2_rentabilidad <- cor(testData$Rentabilidad_pct, pred_rentabilidad)^2
cat(paste0("üìà R¬≤ Rentabilidad (%): ", round(r2_rentabilidad, 4), "\n"))