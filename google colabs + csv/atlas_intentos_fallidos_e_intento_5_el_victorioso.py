# -*- coding: utf-8 -*-
"""ATLAS  intentos fallidos e intento 5 el victorioso

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QNDszYl-bmNnYmafG0oRLykU_J4Ip8NL

# Intento 1
"""

# Instalar si es necesario (SE DEMORA 7 MINUTOS en ejecutar)
install.packages(c("readr", "dplyr", "randomForest", "ggplot2", "caret"))

# Cargar librer√≠as
library(readr)
library(dplyr)
library(randomForest)
library(ggplot2)
library(caret)

# Leer CSV
df <- read_csv("AtlasRetail_PowerBI_Final_Limpio.csv", locale = locale(decimal_mark = ","))

# Renombrar variables clave
names(df)[names(df) == "Margen_(%)"] <- "Margen_pct"
names(df)[names(df) == "Rentabilidad_(%)"] <- "Rentabilidad_pct"

df <- df %>%
  mutate(
    Margen_pct = as.numeric(gsub(",", ".", as.character(Margen_pct))),
    Rentabilidad_pct = as.numeric(gsub(",", ".", as.character(Rentabilidad_pct))),
    Costo_envio = as.numeric(gsub(",", ".", Costo_de_envio)),
    Descuento = as.numeric(gsub(",", ".", Descuento)),
    Precio_unitario = as.numeric(gsub(",", ".", Precio_Unitario_de_Venta)),
    Cantidad = as.numeric(Cantidad),
    Regi√≥n = as.factor(Region),
    Categor√≠a = as.factor(Categoria),
    Sub_Categoria = as.factor(Sub_Categoria),
    Prioridad = as.factor(Prioridad_de_orden)
  ) %>%
  select(Rentabilidad_pct, Margen_pct, Costo_envio, Descuento, Cantidad,
         Precio_unitario, Regi√≥n, Categor√≠a, Sub_Categoria, Prioridad) %>%
  na.omit()

# Filtrar outliers en Rentabilidad
Q1_r <- quantile(df$Rentabilidad_pct, 0.25)
Q3_r <- quantile(df$Rentabilidad_pct, 0.75)
IQR_r <- Q3_r - Q1_r
lim_inf_r <- Q1_r - 1.5 * IQR_r
lim_sup_r <- Q3_r + 1.5 * IQR_r

# Filtrar outliers en Margen
Q1_m <- quantile(df$Margen_pct, 0.25)
Q3_m <- quantile(df$Margen_pct, 0.75)
IQR_m <- Q3_m - Q1_m
lim_inf_m <- Q1_m - 1.5 * IQR_m
lim_sup_m <- Q3_m + 1.5 * IQR_m

# Aplicar filtros combinados
df <- df %>%
  filter(Rentabilidad_pct > lim_inf_r, Rentabilidad_pct < lim_sup_r,
         Margen_pct > lim_inf_m, Margen_pct < lim_sup_m)

nrow(df)

set.seed(42)  # Para que los resultados sean reproducibles

trainIndex <- createDataPartition(df$Rentabilidad_pct, p = 0.8, list = FALSE)
trainData <- df[trainIndex, ]
testData <- df[-trainIndex, ]

# 1ra prueba de Entrenamiento (fall√≥ se demora m√°s de 30 minutos en procesarla y ni siquiera se ejecut√≥, no se esper√≥ m√°s)

modelo_rf <- randomForest(
  Rentabilidad_pct ~ Costo_envio + Descuento + Cantidad + Precio_unitario +
    Regi√≥n + Categor√≠a + Sub_Categoria + Prioridad,
  data = trainData,
  ntree = 500,
  mtry = 4,
  importance = TRUE
)

# 2do intento de Entrenamiento optimizado (sin Sub_Categor√≠a y menos √°rboles), se demoro 17 minutos en ejecutar
modelo_rf <- randomForest(
  Rentabilidad_pct ~ Costo_envio + Descuento + Cantidad + Precio_unitario +
    Regi√≥n + Categor√≠a + Prioridad,
  data = trainData,
  ntree = 200,     # Menos √°rboles ‚Üí m√°s r√°pido
  mtry = 4,        # N√∫mero de variables probadas por divisi√≥n
  importance = TRUE
)

# Predicciones en test
pred <- predict(modelo_rf, newdata = testData)

# M√©tricas
rsq <- cor(pred, testData$Rentabilidad_pct)^2
rmse <- sqrt(mean((pred - testData$Rentabilidad_pct)^2))

cat("‚úÖ Nuevo R¬≤:", rsq, "\nüìâ Nuevo RMSE:", rmse, "\n")

varImpPlot(modelo_rf, main = "Importancia de Variables - Modelo Optimizado")

"""# Intento 2"""

# 1. Volvemos a cargar todo con variables originales
df <- read_csv("AtlasRetail_PowerBI_Final_Limpio.csv", locale = locale(decimal_mark = ","))

names(df)[names(df) == "Margen_(%)"] <- "Margen_pct"
names(df)[names(df) == "Rentabilidad_(%)"] <- "Rentabilidad_pct"

df <- df %>%
  mutate(
    Margen_pct = as.numeric(gsub(",", ".", as.character(Margen_pct))),
    Rentabilidad_pct = as.numeric(gsub(",", ".", as.character(Rentabilidad_pct))),
    Costo_envio = as.numeric(gsub(",", ".", Costo_de_envio)),
    Descuento = as.numeric(gsub(",", ".", Descuento)),
    Precio_unitario = as.numeric(gsub(",", ".", Precio_Unitario_de_Venta)),
    Cantidad = as.numeric(Cantidad),
    Regi√≥n = as.factor(Region),
    Categor√≠a = as.factor(Categoria),
    Sub_Categoria = as.factor(Sub_Categoria),
    Prioridad = as.factor(Prioridad_de_orden)
  ) %>%
  select(Rentabilidad_pct, Margen_pct, Costo_envio, Descuento, Cantidad,
         Precio_unitario, Regi√≥n, Categor√≠a, Sub_Categoria, Prioridad) %>%
  na.omit()

# Filtrar extremos verdaderos
df <- df %>%
  filter(Rentabilidad_pct > -100, Rentabilidad_pct < 150,
         Margen_pct > -100, Margen_pct < 150)

set.seed(42)
# se demoro 22 minutos en ejecutarse
trainIndex <- createDataPartition(df$Rentabilidad_pct, p = 0.8, list = FALSE)
trainData <- df[trainIndex, ]
testData <- df[-trainIndex, ]

modelo_final <- randomForest(
  Rentabilidad_pct ~ Costo_envio + Descuento + Cantidad + Precio_unitario +
    Regi√≥n + Categor√≠a + Sub_Categoria + Prioridad,
  data = trainData,
  ntree = 200,
  mtry = 4,
  importance = TRUE
)

pred <- predict(modelo_final, newdata = testData)

rsq <- cor(pred, testData$Rentabilidad_pct)^2
rmse <- sqrt(mean((pred - testData$Rentabilidad_pct)^2))

cat("üéØ R¬≤ FINAL:", rsq, "\nüí• RMSE FINAL:", rmse, "\n")

"""# Intento 3"""

# 1. Cargar y preparar los datos
df <- read_csv("AtlasRetail_PowerBI_Final_Limpio.csv", locale = locale(decimal_mark = ","))

names(df)[names(df) == "Rentabilidad_(%)"] <- "Rentabilidad_pct"

df <- df %>%
  mutate(
    Rentabilidad_pct = as.numeric(gsub(",", ".", as.character(Rentabilidad_pct))),
    Costo_envio = as.numeric(gsub(",", ".", Costo_de_envio)),
    Descuento = as.numeric(gsub(",", ".", Descuento)),
    Precio_unitario = as.numeric(gsub(",", ".", Precio_Unitario_de_Venta)),
    Cantidad = as.numeric(Cantidad),
    Regi√≥n = as.factor(Region),
    Categor√≠a = as.factor(Categoria),
    Sub_Categor√≠a = as.factor(Sub_Categoria),
    Prioridad = as.factor(Prioridad_de_orden)
  ) %>%
  select(Rentabilidad_pct, Costo_envio, Descuento, Cantidad, Precio_unitario,
         Regi√≥n, Categor√≠a, Sub_Categor√≠a, Prioridad) %>%
  na.omit()

# 2. Filtrar outliers extremos reales
df <- df %>%
  filter(Rentabilidad_pct > -100, Rentabilidad_pct < 150)

# 3. Split de entrenamiento/prueba
set.seed(42)
trainIndex <- createDataPartition(df$Rentabilidad_pct, p = 0.8, list = FALSE)
trainData <- df[trainIndex, ]
testData <- df[-trainIndex, ]

# 4. Entrenar modelo Random Forest final (se demoro 21 minutos en ejecutar)
modelo_rf <- randomForest(
  Rentabilidad_pct ~ Costo_envio + Descuento + Cantidad + Precio_unitario +
    Regi√≥n + Categor√≠a + Sub_Categor√≠a + Prioridad,
  data = trainData,
  ntree = 200,
  mtry = 4,
  importance = TRUE
)

# 5. Evaluar modelo
pred <- predict(modelo_rf, newdata = testData)
rsq <- cor(pred, testData$Rentabilidad_pct)^2
rmse <- sqrt(mean((pred - testData$Rentabilidad_pct)^2))

cat("üéØ R¬≤ FINAL:", rsq, "\nüìâ RMSE FINAL:", rmse, "\n")

"""# Intento 4"""

# 1. Cargar y preparar los datos
df <- read_csv("AtlasRetail_PowerBI_Final_Limpio.csv", locale = locale(decimal_mark = ","))

names(df)[names(df) == "Rentabilidad_(%)"] <- "Rentabilidad_pct"

df <- df %>%
  mutate(
    Rentabilidad_pct = as.numeric(gsub(",", ".", as.character(Rentabilidad_pct))),
    Costo_envio = as.numeric(gsub(",", ".", Costo_de_envio)),
    Descuento = as.numeric(gsub(",", ".", Descuento)),
    Precio_unitario = as.numeric(gsub(",", ".", Precio_Unitario_de_Venta)),
    Cantidad = as.numeric(Cantidad),
    Regi√≥n = as.factor(Region),
    Categor√≠a = as.factor(Categoria),
    Sub_Categor√≠a = as.factor(Sub_Categoria),
    Prioridad = as.factor(Prioridad_de_orden)
  ) %>%
  select(Rentabilidad_pct, Costo_envio, Descuento, Cantidad, Precio_unitario,
         Regi√≥n, Categor√≠a, Sub_Categor√≠a, Prioridad) %>%
  na.omit()

# 2. Filtrar outliers extremos reales
df <- df %>%
  filter(Rentabilidad_pct > -100, Rentabilidad_pct < 150)

# 3. Split de entrenamiento/prueba
set.seed(42)
trainIndex <- createDataPartition(df$Rentabilidad_pct, p = 0.8, list = FALSE)
trainData <- df[trainIndex, ]
testData <- df[-trainIndex, ]

# 4. Entrenar modelo Random Forest final (se demoro 5 minutos en ejecutar) 1er intento
modelo_rf <- randomForest(
  Rentabilidad_pct ~ Costo_envio + Descuento + Cantidad + Precio_unitario +
    Regi√≥n + Categor√≠a + Prioridad + Sub_Categor√≠a,
  data = trainData,
  ntree = 300,
  mtry = 2,
  importance = TRUE
)

# 4. Entrenar modelo Random Forest final (se demoro 5 minutos en ejecutar) 2do intento
modelo_rf <- randomForest(
  Rentabilidad_pct ~ Costo_envio + Descuento + Cantidad + Precio_unitario +
    Regi√≥n + Categor√≠a + Prioridad + Sub_Categor√≠a,
  data = trainData,
  ntree = 200,
  mtry = 4,
  importance = TRUE
)

# 5. Evaluar modelo
pred <- predict(modelo_rf, newdata = testData)
rsq <- cor(pred, testData$Rentabilidad_pct)^2
rmse <- sqrt(mean((pred - testData$Rentabilidad_pct)^2))

cat("üéØ R¬≤ FINAL:", rsq, "\nüìâ RMSE FINAL:", rmse, "\n")

"""# Recomendaci√≥n chat y explicaci√≥n

üéì ¬øEs posible llegar a R¬≤ = 0.90 con tu dataset?
Respuesta corta: Muy dif√≠cil, casi imposible sin datos adicionales o sin cambiar de modelo completamente.

üß† ¬øPor qu√©?
Tu variable Rentabilidad_pct est√° influida por muchas cosas que no est√°n en el dataset, por ejemplo: Pol√≠ticas internas de descuentos, Costos variables no registrados (como comisiones o devoluciones), Comportamiento del cliente (urgencia, satisfacci√≥n), Promociones cruzadas, log√≠stica interna, temporada, etc.

üëâ Como todo eso no est√° modelado, el modelo no puede explicar el 90% de la variabilidad. Est√°s tratando de predecir un fen√≥meno multicausal con informaci√≥n incompleta.

üî¨ ¬øQu√© alternativas reales tienes para mejorar?
‚úÖ 1. Probar otro modelo m√°s potente: XGBoost
Mucho m√°s preciso que Random Forest si se entrena bien.

PERO: es m√°s dif√≠cil de calibrar y m√°s sensible a errores.

‚úÖ 2. Crear nuevas variables derivadas (feature engineering)
Por ejemplo:

Margen_vs_Precio_unitario

Descuento_por_categoria

Ratio_descuento/costo_total

Eso aumenta la capacidad explicativa del modelo.

‚úÖ 3. Usar regresi√≥n m√∫ltiple con lm() como comparaci√≥n
Aunque no mejora el poder predictivo, te puede servir para ver si Random Forest realmente lo est√° haciendo mal o ya est√°s en el tope t√©cnico de lo que permiten los datos.

üìâ La realidad es:
Modelo	R¬≤ t√≠pico en negocios	RMSE razonable
Random Forest (real)	0.60‚Äì0.75	15‚Äì20
Modelos ideales con m√°s variables ocultas	0.85‚Äì0.95	5‚Äì10

üõë Entonces:
No es que t√∫ lo est√©s haciendo mal.

üëâ Es que los datos que tienes no contienen la explicaci√≥n suficiente para llegar a 90% de R¬≤.

# Intento 5
"""

df <- read_csv("AtlasRetail_PowerBI_Final_Limpio.csv", locale = locale(decimal_mark = ","))

names(df)[names(df) == "Rentabilidad_(%)"] <- "Rentabilidad_pct"
names(df)[names(df) == "Margen_(%)"] <- "Margen_pct"

df <- df %>%
  mutate(
    Rentabilidad_pct = as.numeric(gsub(",", ".", Rentabilidad_pct)),
    Margen_pct = as.numeric(gsub(",", ".", Margen_pct)),
    Costo_envio = as.numeric(gsub(",", ".", Costo_de_envio)),
    Descuento = as.numeric(gsub(",", ".", Descuento)),
    Precio_unitario = as.numeric(gsub(",", ".", Precio_Unitario_de_Venta)),
    Costo_total = as.numeric(gsub(",", ".", Costo_Total)),
    Cantidad = as.numeric(Cantidad),
    Regi√≥n = as.factor(Region),
    Categor√≠a = as.factor(Categoria),
    Sub_Categor√≠a = as.factor(Sub_Categoria),
    Prioridad = as.factor(Prioridad_de_orden)
  ) %>%
  select(Rentabilidad_pct, Margen_pct, Costo_envio, Descuento, Precio_unitario,
         Costo_total, Cantidad, Regi√≥n, Categor√≠a, Sub_Categor√≠a, Prioridad) %>%
  na.omit()

# 2. Crear variables derivadas
df <- df %>%
  mutate(
    Margen_vs_Precio_unitario = ifelse(Precio_unitario == 0, 0, Margen_pct / Precio_unitario),
    Ratio_descuento_costo = ifelse(Costo_envio == 0, 0, Descuento / Costo_envio)
  )

# 3. Descuento promedio por categor√≠a
prom_descuento <- df %>%
  group_by(Categor√≠a) %>%
  summarise(Desc_por_categoria = mean(Descuento, na.rm = TRUE))

df <- left_join(df, prom_descuento, by = "Categor√≠a")

# 4. Filtrar outliers extremos de Rentabilidad
df <- df %>%
  filter(Rentabilidad_pct > -100, Rentabilidad_pct < 150)

# 5. Divisi√≥n entrenamiento / prueba
set.seed(42)
trainIndex <- createDataPartition(df$Rentabilidad_pct, p = 0.8, list = FALSE)
trainData <- df[trainIndex, ]
testData <- df[-trainIndex, ]

# 6. Entrenar modelo con nuevas variables (se demoro 17 min en ejecutarse)
modelo_rf <- randomForest(
  Rentabilidad_pct ~ Costo_envio + Descuento + Precio_unitario + Costo_total + Cantidad +
    Regi√≥n + Categor√≠a + Sub_Categor√≠a + Prioridad +
    Margen_vs_Precio_unitario + Ratio_descuento_costo + Desc_por_categoria,
  data = trainData,
  ntree = 200, #<------------ bajitooo
  mtry = 4,
  importance = TRUE
)

# 6. Entrenar modelo con nuevas variables (se demoro 26 minutos)
modelo_rf <- randomForest(
  Rentabilidad_pct ~ Costo_envio + Descuento + Precio_unitario + Costo_total + Cantidad +
    Regi√≥n + Categor√≠a + Sub_Categor√≠a + Prioridad +
    Margen_vs_Precio_unitario + Ratio_descuento_costo + Desc_por_categoria,
  data = trainData,
  ntree = 300,
  mtry = 4,
  importance = TRUE
)

# 7. Evaluaci√≥n del modelo
pred <- predict(modelo_rf, newdata = testData)
rsq <- cor(pred, testData$Rentabilidad_pct)^2
rmse <- sqrt(mean((pred - testData$Rentabilidad_pct)^2))

cat("üéØ R¬≤ FINAL:", rsq, "\nüìâ RMSE FINAL:", rmse, "\n")

levels(df$Regi√≥n)
levels(df$Categor√≠a)
levels(df$Sub_Categor√≠a)
levels(df$Prioridad)

# Categor√≠as y sus Sub_Categor√≠as v√°lidas:

# Furniture:
#   - Chairs, Tables, Bookcases, Furnishings

# Office Supplies:
#   - Binders, Paper, Labels, Storage, Supplies, Art

# Technology:
#   - Phones, Accessories, Machines, Copiers

df %>%
  group_by(Categor√≠a) %>%
  summarise(Desc_por_categoria = mean(Descuento, na.rm = TRUE))

mean(df$Margen_pct / df$Precio_unitario, na.rm = TRUE)

# Ejemplo: nuevo dato (puedes cambiar los valores)
nuevo_dato <- data.frame(
  Costo_envio = 3000,
  Descuento = 0.4,
  Precio_unitario = 100,
  Costo_total = 60000,
  Cantidad = 2,
  Regi√≥n = factor("Southeast Asia", levels = levels(df$Regi√≥n)),
  Categor√≠a = factor("Furniture", levels = levels(df$Categor√≠a)),
  Sub_Categor√≠a = factor("Chairs", levels = levels(df$Sub_Categor√≠a)),
  Prioridad = factor("Critical", levels = levels(df$Prioridad)),
  Margen_vs_Precio_unitario = 0.20,       # Calculado o estimado
  Ratio_descuento_costo = 0.10,         # Descuento / Costo_envio
  Desc_por_categoria = 0.10               # Promedio seg√∫n categor√≠a
)

# Predicci√≥n
pred_rentabilidad <- predict(modelo_rf, newdata = nuevo_dato)

# Mostrar resultado
cat("üîÆ Predicci√≥n de Rentabilidad (%) =", round(pred_rentabilidad, 2), "%\n")